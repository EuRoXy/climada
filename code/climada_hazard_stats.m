function hazard = climada_hazard_stats(hazard,return_periods,check_plot,rain,check_printplot)
% NAME:
%   climada_hazard_stats
% PURPOSE:
%   add wind speed for requested return periods
%     .intensity_fit_ori
%     .intensity_fit
%     .R_fit (requested return periods)
% wind speed for return periods are calculate based on historical and 
% probabilistic data set or climate change hazard 
%
% CALLING SEQUENCE:
%   climada_hazard_stats(hazard,return_periods,check_plot,rain,check_printplot)
% EXAMPLE:
%   for wind:
%   climada_hazard_stats
%   climada_hazard_stats([],[1 5 10 25 50 100 500 1000],[],1,[])
%   for rain:
%   climada_hazard_stats([],[1 5 10 25 50 100 500 1000],[],1,[],1)
% INPUTS:
%   none
% OPTIONAL INPUT PARAMETERS:
%   hazard: hazard structure, if not given, prompted for
%       generated by e.g. climada_tc_hazard_set
%   return_periods: vector containing the requested return periods 
%       (e.g. [1 5 10 25 50 100 500 1000])
%       if empty, taken from default as defined in climada_init_vars
%   check_plot: default=1, draw the intensity maps for various return
%       periods. Set=0 to omit plot
%   rain: set =1 for rain colormap and titles, default: 0
%   check_printplot: if =1, user will be asked to generate a pdf, default=0
% OUTPUTS:
%   hazard structure with
%   - hazard.arr_sort:          probabilistic sorted windspeed per centroid
%   - hazard.arr_ori_sort:      historical sorted windspeed per centroid
%   - hazard.R_fit:             requested return periods
%   - hazard.intensity_fit_ori: fitted wind speed for requested
%                               return periods for every centroid 
%   - hazard.intensity_fit:     fitted wind speed for requested
%                               return periods for every centroid 
% MODIFICATION HISTORY:
% Lea Mueller, 20110623
% David N. Bresch, david.bresch@gmail.com, 20130317 cleanup
%-                       

% init global variables
global climada_global
if ~climada_init_vars, return; end

% poor man's version to check arguments
if ~exist('hazard'        , 'var'), hazard         = []; end
if ~exist('return_periods', 'var'), return_periods = []; end 
if ~exist('check_plot'    , 'var'), check_plot     = 1 ; end
if ~exist('rain'          , 'var'), rain           = 0; end
if ~exist('check_printplot','var'), check_printplot = 0; end

% prompt for hazard if not given
if isempty(hazard) % local GUI
    hazard               = [climada_global.data_dir filesep 'hazards' filesep '*.mat'];
    [filename, pathname] = uigetfile(hazard, 'Open existing hazard event set:');
    if isequal(filename,0) || isequal(pathname,0)
        return; % cancel
    else
        hazard = fullfile(pathname,filename);
    end
end

% load the hazard, if a filename has been passed
if ~isstruct(hazard)
    hazard_file = hazard;hazard=[];
    load(hazard_file);
end

%check if based on probabilistic tc track set
if length(hazard.orig_event_flag)> hazard.orig_event_count
    probabilistic = 1;
else
    probabilistic = 0;
    fprintf('\n******\nWarning: Selected hazard does not contain probabilistic \nevents, based only on historical data.\n*****\n\n')
end

threshold    = 5;
no_generated = hazard.event_count / hazard.orig_event_count;

% set return periods if not given
if isempty(return_periods)
    return_periods_calc = climada_global.DFC_return_periods;
    return_periods_show = return_periods_calc([1:4 10 12 17 20:21]);
else
    return_periods_calc = return_periods;
    return_periods_show = return_periods;
end
%exc_freq            = 1./return_periods;

% check if statistics are already in hazard structure
if ~isfield(hazard,'R')
    calc = 1;
elseif ~all(ismember(return_periods_show,hazard.R_fit))
    calc = 1;
else
    fprintf('Intensity data already calculated for %d\n', return_periods_show)
    calc = 0;
end

if calc
    fprintf('Calculate statistics...\n')

    % today, probabilistic
    hazard.arr_sort     = sort(hazard.arr,'descend');
    % today, historical
    hazard.arr_ori_sort = sort(hazard.arr(1:no_generated:end,:),'descend');

    hazard.R            = 1./cumsum(hazard.frequency);
    hazard.R_ori        = 1./cumsum(hazard.frequency(1:no_generated:end)*no_generated);

    %% decide for specific return periods, and calculate according wind speed
    %  in original tracks and probabilist tracks, add to hazard
    % .intensity_fit_ori
    % .R_fit_ori
    % .intensity_fit
    % .R.fit
    centroid_count           = size(hazard.arr,2);
    hazard.intensity_fit_ori = spalloc(length(return_periods_calc),length(hazard.centroid_ID),ceil(length(return_periods_calc)*length(hazard.centroid_ID)*0.01));
    hazard.intensity_fit     = spalloc(length(return_periods_calc),length(hazard.centroid_ID),ceil(length(return_periods_calc)*length(hazard.centroid_ID)*0.01));
    hazard.R_fit             = return_periods_calc;

    for centroid_i = 1:1:centroid_count
        if ~strcmp(strtok(hazard.comment),'climate')
            %% historical data
            [intensity_pos, ind_int]   = sort(hazard.arr(1:no_generated:end,centroid_i),'descend');
            intensity_pos              = full(intensity_pos);
            below_thresh_pos           = intensity_pos<threshold;
            intensity_pos(intensity_pos<threshold) = [];

            % sort frequency accordingly
            frequency2 = hazard.frequency(1:no_generated:end);
            frequency2 = frequency2(ind_int);
            frequency2(below_thresh_pos) = [];

            if intensity_pos
                % exceedance frequency
                freq            = cumsum(frequency2(1:length(intensity_pos))*no_generated)';
                if length(freq)>1
                    p           = polyfit(log(freq), intensity_pos, 1);
                else
                    p = zeros(2,1);
                end
                exc_freq                               = 1./return_periods_calc;
                intensity_fit                          = polyval(p, log(exc_freq));
                intensity_fit(intensity_fit<=0)        = 0; %nan;
                R                                      = 1./freq;
                neg                                    = return_periods_calc >max(R);
                intensity_fit(neg)                     = 0; %nan
                hazard.intensity_fit_ori(:,centroid_i) = intensity_fit;
            end
        end %historical data

        %% probabilistic data
        % intensity
        [intensity_pos, ind_int]   = sort(hazard.arr(:,centroid_i),'descend');
        intensity_pos              = full(intensity_pos);
        below_thresh_pos           = intensity_pos<threshold;
        intensity_pos(intensity_pos<threshold) = [];

        % sort frequency accordingly
        frequency2 = hazard.frequency;
        frequency2 = frequency2(ind_int);
        frequency2(below_thresh_pos) = [];

        if intensity_pos
            %exceedance frequency
            freq            = cumsum(frequency2(1:length(intensity_pos)))';
            if length(freq)>1
                p           = polyfit(log(freq), intensity_pos, 1);
            else
                p = zeros(2,1);
            end
            exc_freq      = 1./return_periods_calc;
            intensity_fit = polyval(p, log(exc_freq));
            intensity_fit(intensity_fit<=0)    = 0; %nan;
            R                                  = 1./freq;
            neg                                = return_periods_calc >max(R);
            intensity_fit(neg)                 = 0; %nan;
            hazard.intensity_fit(:,centroid_i) = intensity_fit;
        end %intensity_pos, probabilistic data
    end %centroid_i

    % save hazard file with stats
    [fP,fN]=fileparts(hazard.filename);
    if ~exist(fP,'dir'),fP=[climada_global.data_dir filesep 'hazards'];end % if hazard created on another machine...
    hazard_R_file = [fP filesep fN '_R.mat'];
    fprintf('Saving hazard statics in %s\n',hazard_R_file);
    save(hazard_R_file,'hazard')

end %if calc

%----------------
%% FIGURE
%----------------
if check_plot
    close all
    fontsize = 8;
    %set maximum of colorbar
    if rain == 1; caxis_max = 500; else caxis_max = 100; end
    %create colormap for wind (orange) or rain (blue):
    if rain == 1
        steps10 = 10;
        %steps10=8;
        %create colormap
        cmap1 = [];
        cmap2 = [];
        startcolor   = [0.89	0.93	0.89];
        middlecolor1 = [0.55	0.78	0.59];
        middlecolor2 = [0.43	0.84	0.78];
        endcolor     = [0.05	0.37	0.55];
        for i=1:3
            cmap1(:,i)=startcolor(i):(middlecolor1(i)-startcolor(i))/(steps10/2-1):middlecolor1(i);
            cmap2(:,i)=middlecolor2(i):(endcolor(i)-middlecolor2(i))/(steps10/2-1):endcolor(i);
        end
        cmap = [cmap1; cmap2];    
    else
        cmap=[  1.0000    1.0000    1.0000;
                0.8100    0.8100    0.8100;
                0.6300    0.6300    0.6300;
                1.0000    0.8000    0.2000;
                0.9420    0.6667    0.1600;
                0.8839    0.5333    0.1200;
                0.8259    0.4000    0.0800;
                0.7678    0.2667    0.0400;
                0.7098    0.1333         0;
                0.5412    0.1020         0];
    end

    fprintf('Preparing wind speed vs return periods maps\n')
    
    centroids.Longitude=hazard.lon;
    centroids.Latitude=hazard.lat;
    scale = max(centroids.Longitude)-min(centroids.Longitude);
    scale2= (max(centroids.Longitude)-min(centroids.Longitude)+scale*2/30)...
           /(max(centroids.Latitude )-min(centroids.Latitude )+scale*2/30);

%     if ~strcmp(strtok(hazard.comment),'climate')
%         %------------------------
%         % historical hazard map
%         %------------------------
%         return_count = length(return_periods_show);
%         if return_count < 3; y_no = return_count; else y_no  = 3; end
%         x_no   = ceil(return_count/3);
%         msgstr = sprintf('Plotting wind speed vs return period map: historical hazard');
%         h      = waitbar(0,msgstr);
%         
%         scale_tot = (y_no*scale2)/x_no;
%         he = 0.7;
%         wi = 0.7*scale_tot;
%         if wi>1.2
%             wi = 1.2;
%             he = 1.2/scale_tot;
%         end
%         fig = climada_figuresize(he+0.1, wi);
%         %fig = climada_figuresize(0.8,0.9);
%         subaxis(x_no, y_no, 1,'MarginTop',0.15, 'mb',0.05)
%         
%         % colorbar
%         subaxis(2); pos = get(subaxis(2),'pos');
%         dist = .06; %distance in normalized units from the top of the axes
%         hc   = colorbar('yTick',[10 20 40 60 80 100],'location','northoutside','position',[pos(1) pos(2)+pos(4)+dist pos(3) 0.03]);
%         if rain == 1
%             set(get(hc,'xlabel'),'String', 'Historical rain sum (mm)','fontsize',fontsize);
%         else
%             set(get(hc,'xlabel'),'String', 'Historical wind speed (m/s)','fontsize',fontsize);
%         end
%         caxis([0 caxis_max])    
%         set(gca,'fontsize',fontsize) 
%         hold on
%         
%         for i = 1:return_count %x_no*y_no %return_count
%             waitbar(i/return_count, h, msgstr); % update waitbar
%             subaxis(i)
%             
%             fit_index = return_periods_show(i) == hazard.R_fit;
%             values    = full(hazard.intensity_fit_ori(fit_index,:));
%             
%             if sum(values(not(isnan(values))))>0 % nansum(values)>0
%                 [X, Y, gridded_VALUE] = climada_gridded_VALUE(values, centroids);
%                 gridded_VALUE(gridded_VALUE<(0.1)) = NaN;
%                 contourf(X, Y, gridded_VALUE,200,'edgecolor','none')      
%             else
%                 text(mean([min(centroids.Longitude) max(centroids.Longitude)]),...
%                      mean([min(centroids.Latitude ) max(centroids.Latitude )]),...
%                     'no data for this return period available','fontsize',fontsize,...
%                     'HorizontalAlignment','center')
%             end
%             hold on
%             climada_plot_world_borders(0.7) 
%             if rain == 1
%                 title([int2str(hazard.R_fit(fit_index)) ' yr rain sum'],'fontsize',fontsize);
%             else
%                 title([int2str(hazard.R_fit(fit_index)) ' yr intensity'],'fontsize',fontsize);
%             end
%             %axis([-67 -55 7 19])% zoom to 
%             axis([min(centroids.Longitude)-scale/30  max(centroids.Longitude)+scale/30 ...
%                   min(centroids.Latitude )-scale/30  max(centroids.Latitude )+scale/30])  
%             %colormap(gray_red_yellow)
%             % do not display xticks, nor yticks
%             set(subaxis(i),'xtick',[],'ytick',[],'DataAspectRatio',[1 1 1])
%             colormap(cmap)
%             caxis([0 caxis_max])    
%             set(gca,'fontsize',fontsize)                   
%         end% return_i    
%         close(h); % dispose waitbar
%         
%         if check_printplot %(>=1)   
%             choice = questdlg('print?','print');
%             switch choice
%             case 'Yes'; check_printplot = 1; case 'No'; check_printplot = 0; case 'Cancel'; check_printplot = 0; end
%         end
% 
%         if check_printplot %(>=1)   
%             foldername = [filesep 'results' filesep 'hazard_stats_historical_' strtok(hazard.comment) '_' int2str(hazard.reference_year) '.pdf'];
%             print(fig,'-dpdf',[climada_global.data_dir foldername])
%             close
%             cprintf([255 127 36 ]/255,'saved 1 FIGURE in folder %s \n', foldername);
%         end
%     end%historical hazard

    %--------------------
    % probabilistic map
    %--------------------
    %probabilistic = 0;
    if probabilistic
        return_count = length(return_periods_show);
        if return_count < 3; y_no = return_count; else y_no  = 3; end
        x_no         = ceil(return_count/3);

        msgstr   = sprintf('Plotting wind speed vs return period map: probabilistic data');
        h        = waitbar(0,msgstr);
        
        scale_tot = (y_no*scale2)/x_no;
        he = 0.7;
        wi = 0.7*scale_tot;
        if wi>1.2
            wi = 1.2;
            he = 1.2/scale_tot;
        end

        fig2 = climada_figuresize(he+0.1, wi);
        subaxis(x_no, y_no, 1,'MarginTop',0.15, 'mb',0.05)
        
        % colorbar
        subaxis(2);
        pos = get(subaxis(2),'pos');
        %distance in normalized units from the top of the axes
        dist = .06; 
        hc = colorbar('yTick',[10 20 40 60 80 100],'location','northoutside','position',[pos(1) pos(2)+pos(4)+dist pos(3) 0.03]);
        if rain == 1
            set(get(hc,'xlabel'),'String', 'Probabilistic rain sum (mm)','fontsize',fontsize);
        else
            set(get(hc,'xlabel'),'String', 'Probabilistic wind speed (m/s)','fontsize',fontsize);
        end
        caxis([0 caxis_max])    
        set(gca,'fontsize',fontsize)
        
        hold on

        for i=1:return_count %x_no*y_no %return_count
            waitbar(i/return_count, h, msgstr); % update waitbar
            subaxis(i)
            
            fit_index = return_periods_show(i) == hazard.R_fit;
            values    = full(hazard.intensity_fit(fit_index,:));
            if sum(values(not(isnan(values))))>0 % nansum(values)>0
                [X, Y, gridded_VALUE] = climada_gridded_VALUE(values, centroids);
                gridded_VALUE(gridded_VALUE<(0.1)) = NaN;
                contourf(X, Y, gridded_VALUE,200,'edgecolor','none')
            else
                text(mean([min(centroids.Longitude) max(centroids.Longitude)]),...
                     mean([min(centroids.Latitude ) max(centroids.Latitude )]),...
                    'no data for this return period available','fontsize',8,...
                    'HorizontalAlignment','center')
            end
            hold on
            climada_plot_world_borders(0.7)           
            if rain == 1
                title([int2str(hazard.R_fit(fit_index)) ' yr rain sum'],'fontsize',fontsize);
            else
                title([int2str(hazard.R_fit(fit_index)) ' yr intensity'],'fontsize',fontsize);
            end
            axis([min(centroids.Longitude)-scale/30  max(centroids.Longitude)+scale/30 ...
                  min(centroids.Latitude )-scale/30  max(centroids.Latitude )+scale/30])  
            % do not display xticks, nor yticks
            set(subaxis(i),'xtick',[],'ytick',[],'DataAspectRatio',[1 1 1])
            caxis([0 caxis_max])
            colormap(cmap)
            set(gca,'fontsize',fontsize)
        end %return_i
        close(h); % dispose waitbar     
        if check_printplot %(>=1)   
            choice = questdlg('print?','print');
            switch choice
            case 'Yes'; check_printplot = 1; case 'No'; check_printplot = 0; case 'Cancel'; check_printplot = 0; end
        end
        if check_printplot %(>=1)   
            foldername = [filesep 'results' filesep 'hazard_stats_probabilistic_' strtok(hazard.comment) '_' int2str(hazard.reference_year) '.pdf'];
            print(fig2,'-dpdf',[climada_global.data_dir foldername])
            close
            cprintf([255 127 36 ]/255,'saved 1 FIGURE in folder %s \n', foldername);
        end 
     end %probabilistic
     
end % check_plot
    
return




